
name: Publish packages

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      publish_pypi:
        description: "Publish PyPI packages on success?"
        required: true
        type: boolean
        default: true
#     publish_anaconda:
#       description: "Publish Anaconda packages on success?"
#       required: true
#       type: boolean
#       default: true
      build_number:
        description: "Package build number"
        required: true
        type: string
        default: 0

jobs:

  build:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os:
          - ubuntu-latest
          - macos-latest
          - windows-latest
        python-version:
          - "3.10"

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: "pip"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r test-requirements.txt

      - name: Build sdist
        if: ${{ matrix.os == 'ubuntu-latest' }}
        run: |
          python -m build --sdist

      - name: Build wheel (x86_64)
        uses: RalfG/python-wheels-manylinux-build@v0.6.0-manylinux2014_x86_64
        if: ${{ matrix.os == 'ubuntu-latest' }}
        with:
          python-versions: 'cp310-cp310'

      - name: Build wheel (i686)
        uses: RalfG/python-wheels-manylinux-build@v0.6.0-manylinux2014_i686
        if: ${{ matrix.os == 'ubuntu-latest' }}
        with:
          python-versions: 'cp310-cp310'

      - name: Build wheel (aarch64)
        uses: RalfG/python-wheels-manylinux-build@v0.6.0-manylinux2014_aarch64
        if: ${{ matrix.os == 'ubuntu-latest' }}
        with:
          python-versions: 'cp310-cp310'

      - name: Build wheel (Windows & Mac)
        if: ${{ matrix.os == 'macos-latest' || matrix.os == 'windows-latest' }}
        run: |
          python -m build --wheel

#     - name: Build conda
#       if: ${{ matrix.os != 'windows-latest' }}
#       run: |
#         # $CONDA is an environment variable pointing to the root of the miniconda directory
#         echo $CONDA/bin >> $GITHUB_PATH
#         conda update conda
#         conda install conda-build anaconda-client conda-verify
#         mkdir conda-bld
#         cd conda.recipe
#         conda build -c singlestore -c conda-forge --output-folder ../conda-bld --no-test --no-anaconda-upload .

#     - name: Build conda (Windows)
#       if: ${{ matrix.os == 'windows-latest' }}
#       run: |
#         C:\Miniconda\condabin\conda.bat update conda
#         C:\Miniconda\condabin\conda.bat install conda-build anaconda-client conda-verify
#         mkdir conda-bld
#         cd conda.recipe
#         C:\Miniconda\condabin\conda.bat build -c singlestore -c conda-forge --output-folder ../conda-bld --no-test --no-anaconda-upload .
#

      - name: Clean out unused Linux files
        run: |
          rm dist/*-linux_*.whl
          ls dist

      - name: Archive source dist and wheel
        uses: actions/upload-artifact@v3
        with:
          name: wheel-${{ matrix.os }}
          path: |
            dist
          retention-days: 2

#    - name: Archive conda
#       uses: actions/upload-artifact@v3
#       with:
#         name: conda-${{ matrix.os }}
#         path: |
#           conda-bld/*
#         retention-days: 2

  setup-database:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Install dependencies
        run: |
          python --version
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Initialize database
        id: initialize-database
        run: |
          python resources/create_test_cluster.py --password="${{ secrets.CLUSTER_PASSWORD }}" --token="${{ secrets.CLUSTER_API_KEY }}" --init-sql singlestoredb/tests/test.sql --output=github --expires=2h "python - $GITHUB_WORKFLOW - $GITHUB_RUN_NUMBER"
        env:
          PYTHONPATH: ${{ github.workspace }}

    outputs:
      cluster-id: ${{ steps.initialize-database.outputs.cluster-id }}
      cluster-host: ${{ steps.initialize-database.outputs.cluster-host }}
      cluster-database: ${{ steps.initialize-database.outputs.cluster-database }}

  test:
    needs: [build, setup-database]

    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os:
          - ubuntu-latest
          - macos-latest
          - windows-latest
        python-version:
          - "3.10"

    steps:
      - uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: "pip"

      - name: Download wheel
        uses: actions/download-artifact@v3
        with:
          name: wheel-${{ matrix.os }}
          path: |
            dist

      - name: Install package
        run: |
          pip install -f ./dist/ singlestoredb

      - name: Run smoke tests
        run: |
          pip install -r test-requirements.txt
          pytest -q singlestoredb/tests/test_basics.py
        env:
          SINGLESTOREDB_URL: "mysql://${{ secrets.CLUSTER_USER }}:${{ secrets.CLUSTER_PASSWORD }}@${{ needs.setup-database.outputs.cluster-host }}:3306/${{ needs.setup-database.outputs.cluster-database }}?pure_python=0"

  publish:
    needs: test

    runs-on: ubuntu-latest

    steps:
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install twine

      - name: Download Windows wheel
        uses: actions/download-artifact@v3
        with:
          name: wheel-windows-latest
          path: |
            dist

      - name: Download Mac wheel
        uses: actions/download-artifact@v3
        with:
          name: wheel-macos-latest
          path: |
            dist

      - name: Download Linux wheel
        uses: actions/download-artifact@v3
        with:
          name: wheel-ubuntu-latest
          path: |
            dist

      - name: Publish PyPI package
        if: ${{ github.event_name == 'release' || github.event.inputs.publish_pypi == 'true' }}
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: "${{ secrets.PYPI_TOKEN }}"
        run: |
          ls dist/*
#         twine upload dist/*

#     - name: Publish Conda package
#       if: ${{ github.event_name == 'release' || github.event.inputs.publish_anaconda == 'true' }}
#       env:
#         PACKAGE_BUILD_NUMBER: ${{ github.event.inputs.build_number }}
#       run: |
#         echo $CONDA/bin >> $GITHUB_PATH
#         anaconda -t "${{ secrets.ANACONDA_TOKEN }}" upload --no-progress --user SingleStore --label main conda-bld/*/singlestoredb-*.tar.bz2
#

  shutdown-database:
    needs: [setup-database, test]
    if: ${{ always() }}
    runs-on: ubuntu-latest

    steps:
      # Just use curl here so we don't have to check out the package source again.
      - name: Shutdown database
        run: |
          curl -H "Accept: application/json" -H "Authorization: Bearer ${{ secrets.CLUSTER_API_KEY }}" -X DELETE "https://api.singlestore.com/v1/workspaces/${{ env.CLUSTER_ID }}"
        env:
          CLUSTER_ID: ${{ needs.setup-database.outputs.cluster-id }}
