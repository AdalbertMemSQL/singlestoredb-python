#!/usr/bin/env python
from __future__ import annotations

import glob
import os
import re
import sys
from typing import Any


BASE = sys.argv[1]

CUSTOM_CSS = r'''
code.docutils > .pre {
    color: #505050 !important
}
.rst-content dl:not(.docutils) dl dt {
    border-width: 0px !important;
    background-color: transparent !important;
    margin-bottom: 0px !important;
}
.rst-content table.field-list td.field-body {
    padding-top: 1px;
}
.rst-content dl:not(.docutils) dl dt strong {
    font-size: 115%;
}
.rst-content dl:not(.docutils) dl dt span {
    font-style: italic;
    font-weight: normal;
}
.rst-content dl:not(.docutils) dl dt span.classifier:before {
    content: ' (';
}
.rst-content dl:not(.docutils) dl dt span.classifier:after {
    content: ')';
}
.rst-content dl:not(.docutils) dl dt span.optional,
.rst-content dl:not(.docutils) dl dt span.opt-sep {
    font-weight: normal;
}
.rst-content dl:not(.docutils) dl dt .classifier-delimiter {
    display: none;
}
.rst-content dl:not(.docutils) dl dd strong {
    font-weight: bold;
    font-size: smaller;
}

/* Theme Overrides */
/*
.wy-side-nav-search {
    background-color: rgba(150, 94, 151, 0.5) !important;
}
.wy-menu-vertical {
    color: rgba(150, 94, 151, 0.2) !important;
}

html.writer-html4 .rst-content dl:not(.docutils)>dt,
html.writer-html5 .rst-content dl[class]:not(.option-list):not(.field-list):not(.footnote):not(.glossary):not(.simple)>dt {
    color: ;
    border-top: rgba(150, 94, 151, 0) !important;
    background-color: rgba(150, 94, 151, 0.2) !important;
}
*/
'''


def check_link(m: Any) -> str:
    link, pre, txt, post = m.groups()
    if not link and txt in links:
        return f'<a href="{links[txt]}">{pre}{txt}{post}</a>'
    return m.group(0)


os.chdir(BASE)

# Get list of generated HTML files and the class / method they belong to
links = {}
for f in glob.glob(os.path.join('generated', '*.html')):
    m = re.search(r'([A-Z]\w+)\.html$', f)
    if m:
        links[m.group(1)] = f.split(os.sep)[-1]
        continue

    m = re.search(r'([A-Z]\w+\.[a-z]\w+)\.html$', f)
    if m:
        links[m.group(1)] = f.split(os.sep)[-1]

# Get list of HTML files
html_files = []
for root, dirs, files in os.walk('.'):
    for file in files:
        if file.lower().endswith('.html'):
            html_files.append(os.path.join(root, file))

# Process HTML files
for file in html_files:
    with open(file, 'r') as html_file:
        txt = html_file.read()

        # Remove module names from hidden modules
        txt = re.sub(
            r'(">)singlestore\.(manager|connection)\.([\w\.]+</a>)', r'\1\3', txt,
        )

        # Fix class / method links
        txt = re.sub(
            r'(<a\s+[^>]+>)?(\s*<code[^>]*>\s*<span\s+class="pre">\s*)([\w\.]+)(\s*</span>\s*</code>)',
            check_link, txt,
        )

    with open(file, 'w') as html_file:
        html_file.write(txt)

with open(os.path.join('_static', 'custom.css'), 'w') as custom_css:
    custom_css.write(CUSTOM_CSS.strip())
